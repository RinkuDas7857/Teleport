// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/webassetstorage/v1/webassetstorage.proto

package webassetstorage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebassetStorageService_GetUploadedWebassetKeys_FullMethodName  = "/teleport.webassetstorage.v1.WebassetStorageService/GetUploadedWebassetKeys"
	WebassetStorageService_GetWebasset_FullMethodName              = "/teleport.webassetstorage.v1.WebassetStorageService/GetWebasset"
	WebassetStorageService_UploadWebasset_FullMethodName           = "/teleport.webassetstorage.v1.WebassetStorageService/UploadWebasset"
	WebassetStorageService_GetWebassetStorageStatus_FullMethodName = "/teleport.webassetstorage.v1.WebassetStorageService/GetWebassetStorageStatus"
)

// WebassetStorageServiceClient is the client API for WebassetStorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebassetStorageServiceClient interface {
	// GetUploadWebassetKeysRequest lists the keys of all currently uploaded objects.
	GetUploadedWebassetKeys(ctx context.Context, in *GetUploadedWebassetKeysRequest, opts ...grpc.CallOption) (*GetUploadedWebassetKeysResponse, error)
	// GetWebasset will retrieve the request file from the configured bucket.
	GetWebasset(ctx context.Context, in *GetWebassetRequest, opts ...grpc.CallOption) (*GetWebassetResponse, error)
	// UploadWebasset will upload an object to the configured bucket.
	UploadWebasset(ctx context.Context, in *UploadWebassetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetWebassetStorageStatus will return the current status of the webasset storage service.
	GetWebassetStorageStatus(ctx context.Context, in *GetWebassetStorageStatusRequest, opts ...grpc.CallOption) (*GetWebassetStorageStatusResponse, error)
}

type webassetStorageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebassetStorageServiceClient(cc grpc.ClientConnInterface) WebassetStorageServiceClient {
	return &webassetStorageServiceClient{cc}
}

func (c *webassetStorageServiceClient) GetUploadedWebassetKeys(ctx context.Context, in *GetUploadedWebassetKeysRequest, opts ...grpc.CallOption) (*GetUploadedWebassetKeysResponse, error) {
	out := new(GetUploadedWebassetKeysResponse)
	err := c.cc.Invoke(ctx, WebassetStorageService_GetUploadedWebassetKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webassetStorageServiceClient) GetWebasset(ctx context.Context, in *GetWebassetRequest, opts ...grpc.CallOption) (*GetWebassetResponse, error) {
	out := new(GetWebassetResponse)
	err := c.cc.Invoke(ctx, WebassetStorageService_GetWebasset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webassetStorageServiceClient) UploadWebasset(ctx context.Context, in *UploadWebassetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WebassetStorageService_UploadWebasset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webassetStorageServiceClient) GetWebassetStorageStatus(ctx context.Context, in *GetWebassetStorageStatusRequest, opts ...grpc.CallOption) (*GetWebassetStorageStatusResponse, error) {
	out := new(GetWebassetStorageStatusResponse)
	err := c.cc.Invoke(ctx, WebassetStorageService_GetWebassetStorageStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebassetStorageServiceServer is the server API for WebassetStorageService service.
// All implementations must embed UnimplementedWebassetStorageServiceServer
// for forward compatibility
type WebassetStorageServiceServer interface {
	// GetUploadWebassetKeysRequest lists the keys of all currently uploaded objects.
	GetUploadedWebassetKeys(context.Context, *GetUploadedWebassetKeysRequest) (*GetUploadedWebassetKeysResponse, error)
	// GetWebasset will retrieve the request file from the configured bucket.
	GetWebasset(context.Context, *GetWebassetRequest) (*GetWebassetResponse, error)
	// UploadWebasset will upload an object to the configured bucket.
	UploadWebasset(context.Context, *UploadWebassetRequest) (*emptypb.Empty, error)
	// GetWebassetStorageStatus will return the current status of the webasset storage service.
	GetWebassetStorageStatus(context.Context, *GetWebassetStorageStatusRequest) (*GetWebassetStorageStatusResponse, error)
	mustEmbedUnimplementedWebassetStorageServiceServer()
}

// UnimplementedWebassetStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebassetStorageServiceServer struct {
}

func (UnimplementedWebassetStorageServiceServer) GetUploadedWebassetKeys(context.Context, *GetUploadedWebassetKeysRequest) (*GetUploadedWebassetKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUploadedWebassetKeys not implemented")
}
func (UnimplementedWebassetStorageServiceServer) GetWebasset(context.Context, *GetWebassetRequest) (*GetWebassetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebasset not implemented")
}
func (UnimplementedWebassetStorageServiceServer) UploadWebasset(context.Context, *UploadWebassetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadWebasset not implemented")
}
func (UnimplementedWebassetStorageServiceServer) GetWebassetStorageStatus(context.Context, *GetWebassetStorageStatusRequest) (*GetWebassetStorageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebassetStorageStatus not implemented")
}
func (UnimplementedWebassetStorageServiceServer) mustEmbedUnimplementedWebassetStorageServiceServer() {
}

// UnsafeWebassetStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebassetStorageServiceServer will
// result in compilation errors.
type UnsafeWebassetStorageServiceServer interface {
	mustEmbedUnimplementedWebassetStorageServiceServer()
}

func RegisterWebassetStorageServiceServer(s grpc.ServiceRegistrar, srv WebassetStorageServiceServer) {
	s.RegisterService(&WebassetStorageService_ServiceDesc, srv)
}

func _WebassetStorageService_GetUploadedWebassetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUploadedWebassetKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebassetStorageServiceServer).GetUploadedWebassetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebassetStorageService_GetUploadedWebassetKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebassetStorageServiceServer).GetUploadedWebassetKeys(ctx, req.(*GetUploadedWebassetKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebassetStorageService_GetWebasset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebassetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebassetStorageServiceServer).GetWebasset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebassetStorageService_GetWebasset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebassetStorageServiceServer).GetWebasset(ctx, req.(*GetWebassetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebassetStorageService_UploadWebasset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadWebassetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebassetStorageServiceServer).UploadWebasset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebassetStorageService_UploadWebasset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebassetStorageServiceServer).UploadWebasset(ctx, req.(*UploadWebassetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebassetStorageService_GetWebassetStorageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebassetStorageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebassetStorageServiceServer).GetWebassetStorageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebassetStorageService_GetWebassetStorageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebassetStorageServiceServer).GetWebassetStorageStatus(ctx, req.(*GetWebassetStorageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebassetStorageService_ServiceDesc is the grpc.ServiceDesc for WebassetStorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebassetStorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.webassetstorage.v1.WebassetStorageService",
	HandlerType: (*WebassetStorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUploadedWebassetKeys",
			Handler:    _WebassetStorageService_GetUploadedWebassetKeys_Handler,
		},
		{
			MethodName: "GetWebasset",
			Handler:    _WebassetStorageService_GetWebasset_Handler,
		},
		{
			MethodName: "UploadWebasset",
			Handler:    _WebassetStorageService_UploadWebasset_Handler,
		},
		{
			MethodName: "GetWebassetStorageStatus",
			Handler:    _WebassetStorageService_GetWebassetStorageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/webassetstorage/v1/webassetstorage.proto",
}
