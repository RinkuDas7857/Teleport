// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: teleport/webassetcache/v1/webassetcache.proto

package webassetcache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WebassetCacheService_GetWebasset_FullMethodName = "/teleport.webassetcache.v1.WebassetCacheService/GetWebasset"
)

// WebassetCacheServiceClient is the client API for WebassetCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebassetCacheServiceClient interface {
	// GetWebasset
	GetWebasset(ctx context.Context, in *GetWebassetRequest, opts ...grpc.CallOption) (*GetWebassetResponse, error)
}

type webassetCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebassetCacheServiceClient(cc grpc.ClientConnInterface) WebassetCacheServiceClient {
	return &webassetCacheServiceClient{cc}
}

func (c *webassetCacheServiceClient) GetWebasset(ctx context.Context, in *GetWebassetRequest, opts ...grpc.CallOption) (*GetWebassetResponse, error) {
	out := new(GetWebassetResponse)
	err := c.cc.Invoke(ctx, WebassetCacheService_GetWebasset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebassetCacheServiceServer is the server API for WebassetCacheService service.
// All implementations must embed UnimplementedWebassetCacheServiceServer
// for forward compatibility
type WebassetCacheServiceServer interface {
	// GetWebasset
	GetWebasset(context.Context, *GetWebassetRequest) (*GetWebassetResponse, error)
	mustEmbedUnimplementedWebassetCacheServiceServer()
}

// UnimplementedWebassetCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebassetCacheServiceServer struct {
}

func (UnimplementedWebassetCacheServiceServer) GetWebasset(context.Context, *GetWebassetRequest) (*GetWebassetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWebasset not implemented")
}
func (UnimplementedWebassetCacheServiceServer) mustEmbedUnimplementedWebassetCacheServiceServer() {}

// UnsafeWebassetCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebassetCacheServiceServer will
// result in compilation errors.
type UnsafeWebassetCacheServiceServer interface {
	mustEmbedUnimplementedWebassetCacheServiceServer()
}

func RegisterWebassetCacheServiceServer(s grpc.ServiceRegistrar, srv WebassetCacheServiceServer) {
	s.RegisterService(&WebassetCacheService_ServiceDesc, srv)
}

func _WebassetCacheService_GetWebasset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWebassetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebassetCacheServiceServer).GetWebasset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebassetCacheService_GetWebasset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebassetCacheServiceServer).GetWebasset(ctx, req.(*GetWebassetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WebassetCacheService_ServiceDesc is the grpc.ServiceDesc for WebassetCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebassetCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "teleport.webassetcache.v1.WebassetCacheService",
	HandlerType: (*WebassetCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWebasset",
			Handler:    _WebassetCacheService_GetWebasset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teleport/webassetcache/v1/webassetcache.proto",
}
